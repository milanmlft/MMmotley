% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{find_project_dependenices}
\alias{find_project_dependenices}
\title{Find all R-packages used in a project.}
\usage{
find_project_dependenices(path = ".", write_script = FALSE)
}
\arguments{
\item{path}{Path to the project to be parsed. Used the current directory by
default.}

\item{write_script}{Should an install script be written? Can be either
logical or a character string containing the name of the file to be
written. Default: \code{FALSE}.}
}
\value{
If \code{write_script = FALSE}, returns a character vector of all packages
used in the project. If \code{write_script = TRUE}, writes a file \code{install.R}
(or a custom file name if provided) containing code to install all found
packages.
}
\description{
This is essentially a wrapper around \code{\link[renv:dependencies]{renv::dependencies()}}, but returns
the packages as a character vector which can be supplied directly to
\code{\link[=install.packages]{install.packages()}} or similar. In addition, it figures out which packages
are installed from GitHub and prepends the correct username/organization to
the package name, for use in e.g. \code{\link[remotes:install_github]{remotes::install_github()}} or
\code{\link[BiocManager:install]{BiocManager::install()}}. Optionally, an R script is written containing
code to install the packages.
}
\details{
\strong{NOTE} that this function only works in projects with
\href{https://rstudio.github.io/renv/}{\emph{renv}} set up! At the least, it requires a
\href{https://rstudio.github.io/renv/reference/lockfiles.html}{\code{renv.lock}} file
to be present.
}
\examples{
\dontrun{
find_project_dependencies()

## Writing to a custom file
tmp <- tempfile()
find_project_dependencies(write_script = tmp)
}
}
\author{
Milan Malfait
}
